name: 'UiPath Pack'
description: 'Analyzes and packs all UiPath projects within the repository it runs in. Analyze uses UiPath Workflow Analyzer and will cause the job to stop on Rule Violationes.'
inputs:
  orchestratorUrl: 
    description: 'Orchestrator instance URL'
    required: true
  orchestratorTenant:
    description: 'Tenant on the Orchestrator instance'
    required: true
  orchestratorFolder:
    description: 'Folder path in modern folder setup'
    required: true
  orchestratorApplicationId:
    description: 'Orchestrator Application ID for external applicaiton in Orchestrator'
    required: true
  orchestratorApplicationSecret:
    description: 'Application Secret for external application in Orchestrator'
    required: true
  orchestratorApplicationScope:
    description: 'Application scope for determining accesses of External Application'
    required: true
  orchestratorLogicalName:
    description: 'Logical name for Orchestrator instance'
    required: true
  projectVersion:
    description: 'Project version for the generated package. Should be based on tag in GitHub'
    required: true
outputs:
  packagesPath:
    description: 'Folder containing the generated packages'
    value: ${{ steps.pack.outputs.packages }}


runs:
  using: "composite"
  steps:
    - id: pack
      name: Pack
      shell: powershell
      run: |
        $packages = "${{ github.workspace }}\packages"
        echo "::set-output name=packagesPath::$(echo $packages)"
        foreach($project in Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File)
          {
            & uipcli package pack "$($project.FullName)" --output "${{ github.workspace }}\packages" --libraryOrchestratorUrl ${{ inputs.orchestratorUrl }} --libraryOrchestratorTenant ${{ inputs.OrchestratorTenant }} --libraryOrchestratorAccountForApp ${{ inputs.orchestratorLogicalName }} --libraryOrchestratorApplicationId "${{ inputs.orchestratorApplicationId }}" --libraryOrchestratorApplicationSecret "${{ inputs.orchestratorApplicationSecret }}" --libraryOrchestratorApplicationScope "${{ inputs.orchestratorApplicationScope }}" --libraryOrchestratorFolder "${{ inputs.orchestratorFolder }}" --version ${{ inputs.projectVersion }} -l en-US
            if($LASTEXITCODE -ne 0)
            {
              throw "Pack Failed"
            }
          }

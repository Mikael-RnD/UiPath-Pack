name: UiPath Pack
description: 'Packs all UiPath projects within a repository into .nupkg packages for deployment by other actions. Optional behavior: Pack specified paths only'
inputs:
  projectFilePaths:
    description: 'Relative paths to projecct.json files. Used for passing explicit paths to project files to perform analysis. Can be used as multi-line inputs'
    required: false
  orchestratorUrl: 
    description: 'Orchestrator instance URL'
    default: "https://cloud.uipath.com/"
    required: false
  orchestratorTenant:
    description: 'Tenant on the Orchestrator instance'
    required: true
  orchestratorFolder:
    description: 'Folder path in modern folder setup'
    required: true
  orchestratorApplicationId:
    description: 'Orchestrator Application ID for external applicaiton in Orchestrator'
    required: true
  orchestratorApplicationSecret:
    description: 'Application Secret for external application in Orchestrator'
    required: true
  orchestratorApplicationScope:
    description: 'Application scope for determining accesses of External Application'
    default: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"
    required: false
  orchestratorLogicalName:
    description: 'Logical name for Orchestrator instance'
    required: true
  projectVersion:
    description: 'Project version for the generated package. Should be based on tag in GitHub'
    required: true
outputs:
  packagesPath:
    description: 'Folder containing the generated packages'
    value: ${{ steps.pack.outputs.packagesPath }}

runs:
  using: "composite"
  steps:
    - id: pack
      name: Pack
      shell: pwsh
      run: |
        $packages = "${{ github.workspace }}\packages"
        echo "packagesPath=$packages" >> $Env:GITHUB_OUTPUT
        
        if([string]::IsNullOrEmpty("${{ inputs.projectFilePaths }}")) 
        {
          Write-Host "Scanning full repository directory for project.json files"
          $projectJsonFiles = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File
        } 
        else 
        {
          Write-Host "Getting full path for files given as inputs"
          $projectJsonFiles = "${{ inputs.projectFilePaths }}".Trim()
          $projectJsonFiles = $projectJsonFiles -split "`r`n"
          $projectJsonFiles | Where { -not  [string]::IsNullOrWhiteSpace($_) } | Get-ChildItem -File
        }
        $repoUrl = "$env:GITHUB_SERVER_URL" + "/" + "$env:GITHUB_REPOSITORY"
        
        foreach($p in $projectJsonFiles)
        {
          $project = [System.IO.FileInfo]$p
          uipcli package pack "$($project.FullName)" `
            --output "$packages" `
            --libraryOrchestratorUrl "${{ inputs.orchestratorUrl }}" `
            --libraryOrchestratorTenant "${{ inputs.OrchestratorTenant }}" `
            --libraryOrchestratorAccountForApp "${{ inputs.orchestratorLogicalName }}" `
            --libraryOrchestratorApplicationId "${{ inputs.orchestratorApplicationId }}" `
            --libraryOrchestratorApplicationSecret "${{ inputs.orchestratorApplicationSecret }}" `
            --libraryOrchestratorApplicationScope "${{ inputs.orchestratorApplicationScope }}" `
            --libraryOrchestratorFolder "${{ inputs.orchestratorFolder }}" `
            --version ${{ inputs.projectVersion }} `
            -l en-US `
            --repositoryUrl $repoUrl `
            --repositoryCommit $env:GITHUB_SHA `
            --repositoryBranch $env:GITHUB_REF_NAME `
            --repositoryType git 
              
          if($LASTEXITCODE -ne 0)
          {
            throw "Pack Failed"
          }
        }

    - id: step-summary
      if: always()
      name: Step Summary
      shell: pwsh
      run: |
        echo "### Generated packages: " >> $Env:GITHUB_STEP_SUMMARY

        $packages = Get-ChildItem -Path "${{ steps.pack.outputs.packagesPath }}" -Recurse -Filter *.nupkg -File
        foreach($package in $packages)
        {
          echo ":package: $($package.Name)" >> $Env:GITHUB_STEP_SUMMARY
        }


        

